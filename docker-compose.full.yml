version: '3.8'

services:
  # SOC Agent Backend
  soc-agent:
    build: .
    image: soc-agent:latest
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: soc_agent
      POSTGRES_USER: soc_agent
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-soc_agent_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soc_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: soc-agent-frontend:latest
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    depends_on:
      - soc-agent
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - soc-agent
      - frontend
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mail development server
  maildev:
    image: maildev/maildev:latest
    ports:
      - "1080:1080"   # UI
      - "1025:1025"   # SMTP
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
